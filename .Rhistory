geom_point()#+
# plot outbound commutes
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()
})
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()
})
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
})
# plot inbound commutes
lapply(split(kasanka_in, kasanka_in$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
})
kasanka_ls <- split(kasanka_df,kasanka_df$animalday)
# plot tracks to see which days are complete
lapply(kasanka_ls, function(x){
ggplot(aes(x=location.long, y=location.lat), data=x)+
geom_point()+
ggtitle(x$animalday)
})
# plot tracks to see which days are complete
lapply(kasanka_ls, function(x){
ggplot(aes(x=location.long, y=location.lat), data=x)+
geom_point()+
ggtitle(x$animalday)
})
# for loop to divide each day of the animal in commuting outbound and commuting inbound using 95 percentile of the time difference
mylist <- list()
for (i in 1:length(kasanka_ls)){
# Example: Calculate 95th percentile as the threshold
percentile_threshold <- quantile(kasanka_ls[[i]]$diff, 0.95)
# Find indices where time differences exceed this threshold
x <- which(kasanka_ls[[i]]$diff > percentile_threshold)
mylist[[i]] <- split(kasanka_ls[[i]], cumsum(1:nrow(kasanka_ls[[i]])%in%x))
indv <- unique(names(kasanka_ls[i]))
names(mylist[[i]]) <- paste(indv, seq_along(mylist[[i]]), sep = "_")
}
# convert nested list to data frame
find_df <- function(x) {
if (is.data.frame(x))
return(list(x))
if (!is.list(x))
return(NULL)
unlist(lapply(x, find_df), FALSE)
}
# convert nested list to data frame
find_df <- function(x) {
if (is.data.frame(x))
return(list(x))
if (!is.list(x))
return(NULL)
unlist(lapply(x, find_df), FALSE)
}
data <- find_df(mylist)
# # add name column to list
f <- function (data, name){
data$name <- name
data
}
data <- Map(f, data, names(data))
## fix classification
# remove
data <- data[names(data) %in% c("3370_1_2", "3370_2_2", "3370_3_2", "3370_3_4", "3370_4_2", "3370_5_3", "4149_2_3", "4149_3_1", "4149_3_4", "4149_4_1", "4149_4_4", "4149_5_1", "4149_5_4", "4149_6_2", "4149_6_3", "4149_7_3", "4151_4_2", "4151_5_2", "4157_2_2", "4157_3_2", "4157_3_3", "4157_4_2", "4157_5_2", "4157_5_3", "4157_6_2", "4157_6_3", "4158_3_2", "4158_4_2", "4160_2_3", "4160_6_2", "4164_2_3", "4164_2_4", "4164_3_5", "4164_5_3",  "4164_5_4", "4164_6_2")==FALSE]
# convert list to dataframe
kasanka.commu <- as.data.frame(do.call(rbind, data))
# joind tracks to devide outbound and inbound commutes
kasanka.commu$name[which(kasanka.commu$name=="3370_5_2")] <- "3370_5_1"
kasanka.commu$name[which(kasanka.commu$name=="3370_5_2")] <- "3370_5_1"
kasanka.commu$name[which(kasanka.commu$name=="3370_5_5")] <- "3370_5_4"
kasanka.commu$name[which(kasanka.commu$name=="4148_2_2")] <- "4148_2_1"
kasanka.commu$name[which(kasanka.commu$name=="4148_3_2")] <- "4148_3_1"
kasanka.commu$name[which(kasanka.commu$name=="4148_4_3")] <- "4148_4_2"
kasanka.commu$name[which(kasanka.commu$name=="4148_5_3")] <- "4148_5_2"
kasanka.commu$name[which(kasanka.commu$name=="4151_1_3")] <- "4151_1_2"
kasanka.commu$name[which(kasanka.commu$name=="4151_2_3")] <- "4151_2_2"
kasanka.commu$name[which(kasanka.commu$name=="4151_3_2")] <- "4151_3_1"
kasanka.commu$name[which(kasanka.commu$name=="4151_6_3")] <- "4151_6_2"
kasanka.commu$name[which(kasanka.commu$name=="4151_7_3")] <- "4151_7_2"
kasanka.commu$name[which(kasanka.commu$name=="4156_3_2")] <- "4156_3_1"
kasanka.commu$name[which(kasanka.commu$name=="4156_3_4")] <- "4156_3_3"
kasanka.commu$name[which(kasanka.commu$name=="4156_4_3")] <- "4156_4_2"
kasanka.commu$name[which(kasanka.commu$name=="4156_5_2")] <- "4156_5_1"
kasanka.commu$name[which(kasanka.commu$name=="4156_5_4")] <- "4156_5_3"
kasanka.commu$name[which(kasanka.commu$name=="4157_1_2")] <- "4157_1_1"
kasanka.commu$name[which(kasanka.commu$name=="4158_2_2")] <- "4158_2_1"
kasanka.commu$name[which(kasanka.commu$name=="4158_5_3")] <- "4158_5_2"
kasanka.commu$name[which(kasanka.commu$name=="4158_6_3")] <- "4158_6_2"
kasanka.commu$name[which(kasanka.commu$name=="4160_3_3")] <- "4160_3_2"
kasanka.commu$name[which(kasanka.commu$name=="4160_4_2")] <- "4160_4_1"
kasanka.commu$name[which(kasanka.commu$name=="4160_4_5")] <- "4160_4_3"
kasanka.commu$name[which(kasanka.commu$name=="4160_4_4")] <- "4160_4_3"
kasanka.commu$name[which(kasanka.commu$name=="4160_5_3")] <- "4160_5_2"
kasanka.commu$name[which(kasanka.commu$name=="4164_2_2")] <- "4164_2_1"
kasanka.commu$name[which(kasanka.commu$name=="4164_3_3")] <- "4164_3_1"
kasanka.commu$name[which(kasanka.commu$name=="4164_3_2")] <- "4164_3_1"
kasanka.commu$name[which(kasanka.commu$name=="4164_3_4")] <- "4164_3_1"
kasanka.commu$name[which(kasanka.commu$name=="4164_4_3")] <- "4164_4_2"
kasanka.commu$name[which(kasanka.commu$name=="4164_5_2")] <- "4164_5_1"
kasanka.commu$name[which(kasanka.commu$name=="4164_6_5")] <- "4164_6_3"
kasanka.commu$name[which(kasanka.commu$name=="4164_6_4")] <- "4164_6_3"
lapply(split(kasanka.commu, kasanka.commu$animalday), function(x){
ggplot(aes(x=location.long, y=location.lat, colour = name), data=x)+
geom_point()+
ggtitle(x$animalday)
})
```
# select only outbound commuting
kasanka_out <- kasanka.commu[grep("_1", kasanka.commu$name),]
unique(kasanka_out$name)
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
})
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
# select only inbound commuting
kasanka_in <- kasanka.commu[grep("_1", invert=TRUE,kasanka.commu$name),]
unique(kasanka_in$name)
# plot inbound commutes
lapply(split(kasanka_in, kasanka_in$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=animalday), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
})
View(kasanka_out)
View(kasanka_in)
# create date column
kasanka_out$date <- date(kasanka_out$timestamp)
ggplot(aes(x=location.long, y=location.lat, color=date), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=date), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
})
ggplot(aes(x=location.long, y=location.lat, color=as.factor(date)), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
# plot outbound commutes
lapply(split(kasanka_out, kasanka_out$individual.local.identifier), function(x){
ggplot(aes(x=location.long, y=location.lat, color=as.factor(date)), data=x)+
geom_point()+
ggtitle(x$individual.local.identifier)
})
# split data by day
kasanka_id <- split(kasanka_out, f = kasanka_out$individual.local.identifier)
# compute DTW distances within each day between different individuals
results_list <- lapply(names(kasanka_id), function(id) {
id_data <- kasanka_id[[id]]
# split data by day within the individual
indiv_splits <- split(id_data, id_data$date)
# create all pairwise combinations of individuals for the day
pairs <- expand.grid(names(indiv_splits), names(indiv_splits))
pairs <- subset(pairs, Var1 != Var2)
# compute DTW distance for each pair of individuals
dtw_distances <- mapply(function(ind1, ind2) {
dtw_result <- dtw(indiv_splits[[ind1]][, c("coords.x1", "coords.x2")],
indiv_splits[[ind2]][, c("coords.x1", "coords.x2")],
keep.internals = TRUE)
dtw_result$distance  # extracting the DTW distance
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information and include the date
data.frame(id= unique(id_data$tag_local_identifier), date1=pairs$Var1, date2=pairs$Var2, Distance = unlist(dtw_distances))
})
names(kasanka_out)
# compute DTW distances within each day between different individuals
results_list <- lapply(names(kasanka_id), function(id) {
id_data <- kasanka_id[[id]]
# split data by day within the individual
indiv_splits <- split(id_data, id_data$date)
# create all pairwise combinations of individuals for the day
pairs <- expand.grid(names(indiv_splits), names(indiv_splits))
pairs <- subset(pairs, Var1 != Var2)
# compute DTW distance for each pair of individuals
dtw_distances <- mapply(function(ind1, ind2) {
dtw_result <- dtw(indiv_splits[[ind1]][, c("coords.x1", "coords.x2")],
indiv_splits[[ind2]][, c("coords.x1", "coords.x2")],
keep.internals = TRUE)
dtw_result$distance  # extracting the DTW distance
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information and include the date
data.frame(id= unique(id_data$individual.local.identifier), date1=pairs$Var1, date2=pairs$Var2, Distance = unlist(dtw_distances))
})
names(results_list) <- names(kasanka_id)
dtw_kasanka <- do.call(rbind,results_list)
dtw_kasanka <- dtw_kasanka[!duplicated(dtw_kasanka$Distance),]
dtw_kasanka_ls <- split(dtw_kasanka, dtw_kasanka$id)
# cluster by individual
fitall_ind<- lapply(dtw_kasanka, function(x){
hclust(as.dist(xtabs(Distance ~ date1 + date2, data = x)), method = "ward.D2") #as.dist(xtabs(Distance ~ date1 + date2, data = id))
}) # there is something wrong here
View(dtw_kasanka_ls)
dtw_kasanka <- do.call(rbind,results_list)
dtw_kasanka <- dtw_kasanka[!duplicated(dtw_kasanka$Distance),]
View(dtw_kasanka)
dtw_kasanka_ls <- split(dtw_kasanka, dtw_kasanka$id)
# cluster by individual
fitall_ind<- lapply(dtw_kasanka, function(x){
hclust(as.dist(xtabs(Distance ~ date1 + date2, data = x)), method = "ward.D2") #as.dist(xtabs(Distance ~ date1 + date2, data = id))
}) # there is something wrong here
# cluster by individual
fitall_ind<- lapply(dtw_kasanka_ls, function(x){
hclust(as.dist(xtabs(Distance ~ date1 + date2, data = x)), method = "ward.D2") #as.dist(xtabs(Distance ~ date1 + date2, data = id))
}) # there is something wrong here
# cluster by individual
cluster_kasanka<- lapply(dtw_kasanka_ls, function(x){
hclust(as.dist(xtabs(Distance ~ date1 + date2, data = x)), method = "ward.D2") #as.dist(xtabs(Distance ~ date1 + date2, data = id))
}) # there is something wrong here
names(cluster_kasanka) <- names(dtw_kasanka_ls)
View(dtw_kasanka_ls)
lapply(1:length(cluster_kasanka), function(i){
id <- names(cluster_kasanka[i])
fviz_dend(cluster_kasanka[[i]], k = 2, color_labels_by_k = FALSE, rect = TRUE, main = id)
})
View(cluster_kasanka)
View(dtw_kasanka_ls)
dtw_kasanka_ls[["3359"]]
# compute DTW distances within each day between different individuals
results_list <- lapply(names(kasanka_id), function(id) {
id_data <- kasanka_id[[id]]
# split data by day within the individual
indiv_splits <- split(id_data, id_data$date)
# create all pairwise combinations of individuals for the day
pairs <- expand.grid(names(indiv_splits), names(indiv_splits))
pairs <- subset(pairs, Var1 != Var2)
# compute DTW distance for each pair of individuals
dtw_distances <- mapply(function(ind1, ind2) {
dtw_result <- dtw(indiv_splits[[ind1]][, c("coords.x1", "coords.x2")],
indiv_splits[[ind2]][, c("coords.x1", "coords.x2")],
keep.internals = TRUE)
dtw_result$distance  # extracting the DTW distance
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information and include the date
data.frame(id= unique(id_data$individual.local.identifier), date1=pairs$Var1, date2=pairs$Var2, Distance = unlist(dtw_distances))
})
names(results_list) <- names(kasanka_id)
View(results_list)
View(kasanka_id)
# create date column
kasanka_out$date <- date(kasanka_out$timestamp)
# split data by day
kasanka_id <- split(kasanka_out, f = kasanka_out$individual.local.identifier)
View(kasanka_id)
kasanka_out$individual.local.identifier
# split data by day
kasanka_id <- split(kasanka_out, f = kasanka_out$individual.local.identifier)
View(kasanka_id)
kasanka_out$individual.local.identifier <- droplevels(kasanka_out$individual.local.identifier)
# split data by day
kasanka_id <- split(kasanka_out, f = kasanka_out$individual.local.identifier)
View(kasanka_id)
# compute DTW distances within each day between different individuals
results_list <- lapply(names(kasanka_id), function(id) {
id_data <- kasanka_id[[id]]
# split data by day within the individual
indiv_splits <- split(id_data, id_data$date)
# create all pairwise combinations of individuals for the day
pairs <- expand.grid(names(indiv_splits), names(indiv_splits))
pairs <- subset(pairs, Var1 != Var2)
# compute DTW distance for each pair of individuals
dtw_distances <- mapply(function(ind1, ind2) {
dtw_result <- dtw(indiv_splits[[ind1]][, c("coords.x1", "coords.x2")],
indiv_splits[[ind2]][, c("coords.x1", "coords.x2")],
keep.internals = TRUE)
dtw_result$distance  # extracting the DTW distance
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information and include the date
data.frame(id= unique(id_data$individual.local.identifier), date1=pairs$Var1, date2=pairs$Var2, Distance = unlist(dtw_distances))
})
names(results_list) <- names(kasanka_id)
dtw_kasanka <- do.call(rbind,results_list)
dtw_kasanka <- dtw_kasanka[!duplicated(dtw_kasanka$Distance),]
dtw_kasanka_ls <- split(dtw_kasanka, dtw_kasanka$id)
# cluster by individual
cluster_kasanka<- lapply(dtw_kasanka_ls, function(x){
hclust(as.dist(xtabs(Distance ~ date1 + date2, data = x)), method = "ward.D2") #as.dist(xtabs(Distance ~ date1 + date2, data = id))
}) # there is something wrong here
names(cluster_kasanka) <- names(dtw_kasanka_ls)
View(cluster_kasanka)
lapply(1:length(cluster_kasanka), function(i){
id <- names(cluster_kasanka[i])
fviz_dend(cluster_kasanka[[i]], k = 2, color_labels_by_k = FALSE, rect = TRUE, main = id)
})
#create an id dat column
kasanka_out$ID <- paste(kasanka_out$individual.local.identifier, kasanka_out$date, sep="_")
kasanka_out$ID
kasanka_out_idday <- split(kasanka_out, f = kasanka_out$ID)
# function to compute DTW distances between two dataframes
compute_dtw_between_dataframes <- function(df1, df2) {
dtw_result <- dtw(df1[, c("coords.x2", "coords.x1")],
df2[, c("coords.x2", "coords.x1")],
keep.internals = TRUE, step.pattern = symmetric2, open.end=TRUE)
dtw_result$distance  # Extracting the DTW distance
}
# create all pairwise combinations of dataframes
pairs <- expand.grid(names(kasanka_out_idday), names(kasanka_out_idday))
pairs <- subset(pairs, Var1 != Var2)
set.seed(1)
# compute DTW distances for each pair of dataframes
dtw_distances <- mapply(function(df1_name, df2_name) {
df1 <- kasanka_out_idday[[df1_name]]
df2 <- kasanka_out_idday[[df2_name]]
compute_dtw_between_dataframes(df1, df2)
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information
dtw_kasanka_all<- data.frame(Pair1 = pairs$Var1, Pair2 = pairs$Var2, Distance = unlist(dtw_distances))
# Remove duplicates based on 'Distance' column
dtw_kasanka_all <- dtw_kasanka_all[!duplicated(dtw_kasanka_all$Distance), ]
kasanka_fit <- hclust(as.dist(xtabs(Distance ~ Pair1 + Pair2, data = dtw_kasanka_all)), method = "ward.D2")
# plot the dendrogram
fviz_dend(kasanka_fit, k = 9,  color_labels_by_k = TRUE, rect = TRUE,show_labels = TRUE)
fviz_dend(kasanka_fit, k = 9,  color_labels_by_k = TRUE, rect = TRUE,show_labels = TRUE)
View(dtw_kasanka_all)
View(dtw_kasanka_all)
# create same id column
dtw_kasanka_all <- dtw_kasanka_all %>%
mutate(id1= str_sub(Pair1, 1,4), id2= str_sub(Pair2, 1,4)) %>%
mutate(sameid=ifelse(id1 == id2, "yes", "no"), dyad=paste(id1,id2, sep="_"))
View(dtw_kasanka_all)
dtw_kasanka_all_samedate <- dtw_kasanka_all%>%
filter(sameid=="yes")
# plot outbound similarity between and within ids
ggplot(aes(x=sameid, y=Distance), data=dtw_kasanka_all) +
geom_jitter(aes(alpha=0.5))+
stat_summary(fun = mean, color = "red") +
stat_summary(
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x),
geom = "errorbar",
color = "red",
width = .3
)
View(kasanka_out)
# create an id date column
kasanka_in$ID <- paste(kasanka_in$individual.local.identifier, kasanka_in$date, sep="_")
kasanka_in_idday <- split(kasanka_in, f = kasanka_in$ID)
# create an id date column
kasanka_out$ID <- paste(kasanka_out$individual.local.identifier, kasanka_out$date, sep="_")
kasanka_out_idday <- split(kasanka_out, f = kasanka_out$ID)
# function to compute DTW distances between two dataframes
compute_dtw_between_dataframes <- function(df1, df2) {
dtw_result <- dtw(df1[, c("coords.x2", "coords.x1")],
df2[, c("coords.x2", "coords.x1")],
keep.internals = TRUE, step.pattern = symmetric2, open.end=TRUE)
dtw_result$distance  # Extracting the DTW distance
}
# create all pairwise combinations of dataframes
pairs <- expand.grid(names(kasanka_out_idday), names(kasanka_out_idday))
pairs <- subset(pairs, Var1 != Var2)
set.seed(1)
# compute DTW distances for each pair of dataframes
dtw_distances_out <- mapply(function(df1_name, df2_name) {
df1 <- kasanka_out_idday[[df1_name]]
df2 <- kasanka_out_idday[[df2_name]]
compute_dtw_between_dataframes(df1, df2)
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information
dtw_kasanka_out<- data.frame(Pair1 = pairs$Var1, Pair2 = pairs$Var2, Distance = unlist(dtw_distances_out))
# remove duplicates based on 'Distance' column
dtw_kasanka_out <- dtw_kasanka_out[!duplicated(dtw_kasanka_out$Distance), ]
# create same id column
dtw_kasanka_out <- dtw_kasanka_out %>%
mutate(id1= str_sub(Pair1, 1,4), id2= str_sub(Pair2, 1,4)) %>%
mutate(sameid=ifelse(id1 == id2, "yes", "no"), dyad=paste(id1,id2, sep="_"))
# plot outbound similarity between and within ids
ggplot(aes(x=sameid, y=Distance), data=dtw_kasanka_out) +
geom_jitter(aes(alpha=0.5))+
stat_summary(fun = mean, color = "red") +
stat_summary(
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x),
geom = "errorbar",
color = "red",
width = .3
)
# create an id date column
kasanka_in$ID <- paste(kasanka_in$individual.local.identifier, kasanka_in$date, sep="_")
kasanka_in_idday <- split(kasanka_in, f = kasanka_in$ID)
# function to compute DTW distances between two dataframes
compute_dtw_between_dataframes <- function(df1, df2) {
dtw_result <- dtw(df1[, c("coords.x2", "coords.x1")],
df2[, c("coords.x2", "coords.x1")],
keep.internals = TRUE, step.pattern = symmetric2, open.end=TRUE)
dtw_result$distance  # Extracting the DTW distance
}
# create all pairwise combinations of dataframes
pairs <- expand.grid(names(kasanka_in_idday), names(kasanka_in_idday))
pairs <- subset(pairs, Var1 != Var2)
set.seed(1)
# compute DTW distances for each pair of dataframes
dtw_distances_in <- mapply(function(df1_name, df2_name) {
df1 <- kasanka_in_idday[[df1_name]]
df2 <- kasanka_in_idday[[df2_name]]
compute_dtw_between_dataframes(df1, df2)
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information
dtw_kasanka_in<- data.frame(Pair1 = pairs$Var1, Pair2 = pairs$Var2, Distance = unlist(dtw_distances_in))
# remove duplicates based on 'Distance' column
dtw_kasanka_in <- dtw_kasanka_in[!duplicated(dtw_kasanka_in$Distance), ]
# create same id column
dtw_kasanka_in <- dtw_kasanka_in %>%
mutate(id1= str_sub(Pair1, 1,4), id2= str_sub(Pair2, 1,4)) %>%
mutate(sameid=ifelse(id1 == id2, "yes", "no"), dyad=paste(id1,id2, sep="_"))
# plot outbound similarity between and within ids
ggplot(aes(x=sameid, y=Distance), data=dtw_kasanka_in) +
geom_jitter(aes(alpha=0.5))+
stat_summary(fun = mean, color = "red") +
stat_summary(
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x),
geom = "errorbar",
color = "red",
width = .3
)
View(dtw_kasanka_in)
# create an id date column
kasanka_in$ID <- paste(kasanka_in$individual.local.identifier, kasanka_in$date, sep="_")
kasanka_in_idday <- split(kasanka_in, f = kasanka_in$ID)
# function to compute DTW distances between two dataframes
compute_dtw_between_dataframes <- function(df1, df2) {
dtw_result <- dtw(df1[, c("coords.x2", "coords.x1")],
df2[, c("coords.x2", "coords.x1")],
keep.internals = TRUE, step.pattern = symmetric2, open.end=TRUE)
dtw_result$distance  # Extracting the DTW distance
}
# create all pairwise combinations of dataframes
pairs <- expand.grid(names(kasanka_in_idday), names(kasanka_in_idday))
pairs <- subset(pairs, Var1 != Var2)
set.seed(1)
# compute DTW distances for each pair of dataframes
dtw_distances_in <- mapply(function(df1_name, df2_name) {
df1 <- kasanka_in_idday[[df1_name]]
df2 <- kasanka_in_idday[[df2_name]]
compute_dtw_between_dataframes(df1, df2)
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information
dtw_kasanka_in<- data.frame(Pair1 = pairs$Var1, Pair2 = pairs$Var2, Distance = unlist(dtw_distances_in))
# remove duplicates based on 'Distance' column
dtw_kasanka_in <- dtw_kasanka_in[!duplicated(dtw_kasanka_in$Distance), ]
View(dtw_kasanka_in)
# create an id date column
kasanka_in$ID <- paste(kasanka_in$individual.local.identifier, kasanka_in$date, sep="_")
kasanka_in$ID
# create date column
kasanka_in$date <- date(kasanka_in$timestamp)
# create an id date column
kasanka_in$ID <- paste(kasanka_in$individual.local.identifier, kasanka_in$date, sep="_")
kasanka_in_idday <- split(kasanka_in, f = kasanka_in$ID)
# function to compute DTW distances between two dataframes
compute_dtw_between_dataframes <- function(df1, df2) {
dtw_result <- dtw(df1[, c("coords.x2", "coords.x1")],
df2[, c("coords.x2", "coords.x1")],
keep.internals = TRUE, step.pattern = symmetric2, open.end=TRUE)
dtw_result$distance  # Extracting the DTW distance
}
# create all pairwise combinations of dataframes
pairs <- expand.grid(names(kasanka_in_idday), names(kasanka_in_idday))
pairs <- subset(pairs, Var1 != Var2)
set.seed(1)
# compute DTW distances for each pair of dataframes
dtw_distances_in <- mapply(function(df1_name, df2_name) {
df1 <- kasanka_in_idday[[df1_name]]
df2 <- kasanka_in_idday[[df2_name]]
compute_dtw_between_dataframes(df1, df2)
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# compute DTW distances for each pair of dataframes
dtw_distances_in <- mapply(function(df1_name, df2_name) {
df1 <- kasanka_in_idday[[df1_name]]
df2 <- kasanka_in_idday[[df2_name]]
compute_dtw_between_dataframes(df1, df2)
}, pairs$Var1, pairs$Var2, SIMPLIFY = FALSE)
# combine the results with pair information
dtw_kasanka_in<- data.frame(Pair1 = pairs$Var1, Pair2 = pairs$Var2, Distance = unlist(dtw_distances_in))
# remove duplicates based on 'Distance' column
dtw_kasanka_in <- dtw_kasanka_in[!duplicated(dtw_kasanka_in$Distance), ]
# create same id column
dtw_kasanka_in <- dtw_kasanka_in %>%
mutate(id1= str_sub(Pair1, 1,4), id2= str_sub(Pair2, 1,4)) %>%
mutate(sameid=ifelse(id1 == id2, "yes", "no"), dyad=paste(id1,id2, sep="_"))
# create same id column
dtw_kasanka_in <- dtw_kasanka_in %>%
mutate(id1= str_sub(Pair1, 1,4), id2= str_sub(Pair2, 1,4)) %>%
mutate(sameid=ifelse(id1 == id2, "yes", "no"), dyad=paste(id1,id2, sep="_"))
# plot outbound similarity between and within ids
ggplot(aes(x=sameid, y=Distance), data=dtw_kasanka_in) +
geom_jitter(aes(alpha=0.5))+
stat_summary(fun = mean, color = "red") +
stat_summary(
fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x),
geom = "errorbar",
color = "red",
width = .3
)
